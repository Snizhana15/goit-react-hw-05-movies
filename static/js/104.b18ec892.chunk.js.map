{"version":3,"file":"static/js/104.b18ec892.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/Api.jsx","utils/genre.js","utils/normalization.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px;\n`;\n\nexport const List = styled.ul`\n  align-items: center;\n  flex-wrap: wrap;\n`;\nexport const Item = styled.li`\n  width: 100%;\n  height: 200px;\n  flex-basis: calc(100% / 4 - 15px);\n  padding: 5px;\n\n  & img {\n    width: 200px;\n    max-height: 300px;\n    object-fit: cover;\n  }\n`;\n\nexport const Data = styled.p`\n  margin-top: 15px;\n  font-size: 12px;\n  font-weight: 600;\n`;\n","import { Container, List, Item, Data } from './Cast.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { getMoviesCast } from '../../services/Api';\nimport { getImgPath } from 'utils/normalization';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const res = await getMoviesCast(Number(movieId));\n        setCast(res);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return (\n    <Container>\n      {cast.length !== 0 ? (\n        <List>\n          {cast &&\n            cast.map(({ id, name, profile_path, character }) => {\n              const img = getImgPath(profile_path);\n              return (\n                <Item key={id}>\n                  <img src={img} alt={name} />\n                  <Data>{name}</Data>\n                  <Data>Character: {character} </Data>\n                </Item>\n              );\n            })}\n        </List>\n      ) : (\n        <Data>We don't have information about the actors in that movie.</Data>\n      )}\n    </Container>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport {\n  normalizeMovies,\n  normalizeMoviesDetails,\n} from '../utils/normalization';\n\nconst API_KEY = 'fadee9dfff8cb6b1bff36771479589d6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  include_adult: false,\n  language: 'en-US',\n};\n\nexport const getPopularMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const getMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}?`);\n  const response = normalizeMoviesDetails(data);\n  return response;\n};\n\nexport const getMoviesBySearch = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const getMoviesCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const getMoviesReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`);\n  return data.results;\n};\n","const genre = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n\nexport default genre;\n","import genreList from './genre';\nimport noImg from '../img/noFound.png';\n\nconst genreArr = genre_id => genre_id.map(el => genreList[`${el}`]).join(', ');\nconst genreArrLib = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n  !imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\nexport const normalizeMovies = movies => {\n  return movies.map(\n    ({\n      genres = null,\n      genre_ids = null,\n      id,\n      original_title,\n      name,\n      overview,\n      popularity,\n      poster_path,\n      release_date,\n      vote_average,\n      vote_count,\n    }) => ({\n      genre: genre_ids ? genreArr(genre_ids) : genreArrLib(genres),\n      id: id,\n      title: original_title ? original_title : name,\n      about: overview,\n      popularity: popularity,\n      img: getImgPath(poster_path),\n      releaseDate: release_date ? getDate(release_date) : '',\n      vote: vote_average,\n      votes: vote_count,\n    })\n  );\n};\n\nexport const normalizeMoviesDetails = ({\n  poster_path,\n  title,\n  original_title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  return {\n    genre: genreArrLib(genres),\n    title: original_title ? original_title : title,\n    about: overview,\n    img: getImgPath(poster_path),\n    releaseDate: release_date ? getDate(release_date) : '',\n    vote: vote_average,\n  };\n};\n"],"names":["Container","styled","List","Item","Data","useState","cast","setCast","movieId","useParams","useEffect","getCast","getMoviesCast","Number","res","console","log","message","length","map","id","name","profile_path","character","img","getImgPath","src","alt","axios","api_key","include_adult","language","getPopularMovies","data","response","normalizeMovies","results","getMoviesById","normalizeMoviesDetails","getMoviesBySearch","query","getMoviesReviews","genreArrLib","genres","el","join","imgPath","noImg","getDate","date","slice","movies","genre_id","genre_ids","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","genre","genreList","title","about","releaseDate","vote","votes"],"sourceRoot":""}