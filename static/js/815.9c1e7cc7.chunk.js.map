{"version":3,"file":"static/js/815.9c1e7cc7.chunk.js","mappings":"0SAGaA,EAAgBC,EAAAA,GAAAA,IAAH,mGAKbC,EAAiBD,EAAAA,GAAAA,IAAH,0EAKdE,EAASF,EAAAA,GAAAA,OAAH,yNAWNG,EAAQH,EAAAA,GAAAA,IAAH,uFAMLI,EAAgBJ,EAAAA,GAAAA,IAAH,0FAMbK,EAAYL,EAAAA,GAAAA,GAAH,mEAMTM,EAAcN,EAAAA,GAAAA,EAAH,sFAMXO,EAAgBP,EAAAA,GAAAA,IAAH,6EAKbQ,GAAWR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAH,8N,SCgBrB,EAtDqB,WACnB,IAAQU,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAgBjB,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,8GAEKC,EAAAA,EAAAA,IAAcX,GAFnB,OAEPY,EAFO,OAGbR,EAAQQ,GAHK,gDAKbC,QAAQC,IAAI,KAAMC,SAClBC,MAAM,mDACNX,EAAS,IAAK,CAAEY,SAAS,IAPZ,yDAAH,qDAUdP,GACD,GAAE,CAACV,EAASK,KAGX,iCACE,SAACb,EAAD,CAAQ0B,QAAS,0BAAMb,EAAQ,iBAACE,QAAD,IAACA,GAAD,UAACA,EAAUY,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,IAAxC,EAAjB,qBAGCjB,IACC,UAACd,EAAD,YACE,SAACE,EAAD,WACE,SAACE,EAAD,CAAO4B,IAAKlB,EAAKmB,IAAKC,IAAKpB,EAAKqB,WAElC,UAAC9B,EAAD,YACE,UAACC,EAAD,WACGQ,EAAKqB,MADR,KACiBrB,EAAKsB,YADtB,QAGA,UAAC7B,EAAD,0BAA0BO,EAAKuB,SAC/B,SAAC/B,EAAD,wBACA,SAACC,EAAD,UAAcO,EAAKwB,SACnB,SAAChC,EAAD,sBACA,SAACC,EAAD,UAAcO,EAAKyB,eAIzB,UAAC/B,EAAD,YACE,SAACF,EAAD,sCACA,2BACE,SAACG,EAAD,CAAU+B,GAAG,OAAb,mBACA,SAAC/B,EAAD,CAAU+B,GAAG,UAAb,4BAGJ,SAAC,KAAD,MAGL,C,oNC5DDC,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACtBC,QAHc,mCAIdC,eAAe,EACfC,SAAU,SAGL,IAAMC,EAAgB,mCAAG,wGACPJ,IAAAA,IAAA,sBADO,uBACtBK,EADsB,EACtBA,KACFC,GAAWC,EAAAA,EAAAA,IAAgBF,EAAKG,SAFR,kBAGvBF,GAHuB,2CAAH,qDAMhBzB,EAAa,mCAAG,WAAM4B,GAAN,2FACJT,IAAAA,IAAA,iBAAoBS,EAApB,MADI,uBACnBJ,EADmB,EACnBA,KACFC,GAAWI,EAAAA,EAAAA,IAAuBL,GAFb,kBAGpBC,GAHoB,2CAAH,sDAMbK,EAAiB,mCAAG,WAAMC,GAAN,2FACRZ,IAAAA,IAAA,8BAAiCY,EAAjC,YADQ,uBACvBP,EADuB,EACvBA,KACFC,GAAWC,EAAAA,EAAAA,IAAgBF,EAAKG,SAFP,kBAGxBF,GAHwB,2CAAH,sDAMjBO,EAAa,mCAAG,WAAMJ,GAAN,yFACJT,IAAAA,IAAA,iBAAoBS,EAApB,cADI,uBACnBJ,EADmB,EACnBA,KADmB,kBAEpBA,EAAKS,MAFe,2CAAH,sDAKbC,EAAgB,mCAAG,WAAMN,GAAN,yFACPT,IAAAA,IAAA,iBAAoBS,EAApB,cADO,uBACtBJ,EADsB,EACtBA,KADsB,kBAEvBA,EAAKG,SAFkB,2CAAH,qD,sGCrC7B,IAsBA,EAtBc,CACZ,GAAI,SACJ,GAAI,YACJ,GAAI,YACJ,GAAI,SACJ,GAAI,QACJ,GAAI,cACJ,GAAI,QACJ,MAAO,SACP,GAAI,UACJ,GAAI,UACJ,GAAI,SACJ,MAAO,QACP,KAAM,UACN,MAAO,UACP,IAAK,kBACL,MAAO,WACP,GAAI,WACJ,MAAO,MACP,GAAI,W,UCfAQ,EAAc,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAIA,EAAGC,IAAP,IAAaC,KAAK,KAAnC,EAEbC,EAAa,SAAAC,GAAO,OAC9BA,EAAD,0CAA2DA,GAA3D,UAAcC,EADiB,EAG3BC,EAAU,SAAAC,GAAI,OAAMA,EAAcA,EAAKC,MAAM,EAAG,GAArBD,CAAb,EAEPnB,EAAkB,SAAAqB,GAC7B,OAAOA,EAAOV,KACZ,gBAVaW,EAUb,IACEZ,OAAAA,OADF,MACW,KADX,MAEEa,UAAAA,OAFF,MAEc,KAFd,EAGErB,EAHF,EAGEA,GACAsB,EAJF,EAIEA,eACAX,EALF,EAKEA,KACAY,EANF,EAMEA,SACAC,EAPF,EAOEA,WACAC,EARF,EAQEA,YACAC,EATF,EASEA,aACAC,EAVF,EAUEA,aACAC,EAXF,EAWEA,WAXF,MAYO,CACLvC,MAAOgC,GAvBID,EAuBiBC,EAvBLD,EAASX,KAAI,SAAAC,GAAE,OAAImB,EAAU,GAAD,OAAInB,GAAjB,IAAwBE,KAAK,OAuB1BL,EAAYC,GACrDR,GAAIA,EACJf,MAAOqC,GAAkCX,EACzCvB,MAAOmC,EACPC,WAAYA,EACZzC,IAAK8B,EAAWY,GAChBvC,YAAawC,EAAeV,EAAQU,GAAgB,GACpDvC,KAAMwC,EACNG,MAAOF,EArBT,GAwBH,EAEY3B,EAAyB,SAAC,GAQhC,IAPLwB,EAOI,EAPJA,YACAxC,EAMI,EANJA,MACAqC,EAKI,EALJA,eACAK,EAII,EAJJA,aACAJ,EAGI,EAHJA,SACAf,EAEI,EAFJA,OACAkB,EACI,EADJA,aAEA,MAAO,CACLrC,MAAOkB,EAAYC,GACnBvB,MAAOqC,GAAkCrC,EACzCG,MAAOmC,EACPxC,IAAK8B,EAAWY,GAChBvC,YAAawC,EAAeV,EAAQU,GAAgB,GACpDvC,KAAMwC,EAET,C","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/Api.jsx","utils/genre.js","utils/normalization.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const CardContainer = styled.div`\n  display: flex;\n  padding: 10px 20px 20px;\n  border-bottom: 1px solid;\n`;\nexport const ImageContainer = styled.div`\n  margin-right: 35px;\n  flex-direction: column;\n`;\n\nexport const Button = styled.button`\n  font-weight: bold;\n  background: rgb(10, 90, 90);\n  margin-bottom: 5px;\n  padding: 7px 12px;\n  border-radius: 5px;\n  color: white;\n  transition: all 0.5s ease 0s;\n  margin-top: 20px;\n`;\n\nexport const Image = styled.img`\n  max-width: 200px;\n  display: block;\n  border-radius: 5px;\n`;\n\nexport const DataContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 53px;\n`;\n\nexport const DataTitle = styled.h2`\nfont-size: 30px;\nmargin-bottom: 10px;\n}\n`;\n\nexport const Description = styled.p`\nfont-size:18px;\n&:not(:last-of-type){\nmargin-bottom: 20px;\n`;\n\nexport const InfoContainer = styled.div`\n  padding: 10px 20px 20px;\n  border-bottom: black;\n`;\n\nexport const InfoLink = styled(NavLink)`\n  font-size: 18px;\n  &:not(:last-of-type) {\n    margin-right: 15px;\n  }\n  &.active {\n    background-color: rgb(10, 90, 90);\n    color: white;\n    border-radius: 4px;\n    padding: 5px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { Outlet, useParams, useNavigate, useLocation } from 'react-router';\nimport { getMoviesById } from '../../services/Api';\nimport {\n  CardContainer,\n  ImageContainer,\n  Button,\n  Image,\n  DataContainer,\n  DataTitle,\n  Description,\n  InfoContainer,\n  InfoLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [info, setInfo] = useState(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    const getMovie = async () => {\n      try {\n        const res = await getMoviesById(movieId);\n        setInfo(res);\n      } catch (error) {\n        console.log(error.message);\n        alert('Sorry, this link failed. Redirect to Home page!');\n        navigate('/', { replace: true });\n      }\n    };\n    getMovie();\n  }, [movieId, navigate]);\n\n  return (\n    <>\n      <Button onClick={() => navigate(location?.state?.from ?? '/')}>\n        Go Back\n      </Button>\n      {info && (\n        <CardContainer>\n          <ImageContainer>\n            <Image src={info.img} alt={info.title} />\n          </ImageContainer>\n          <DataContainer>\n            <DataTitle>\n              {info.title} ({info.releaseDate})\n            </DataTitle>\n            <Description>User score: {info.vote}</Description>\n            <DataTitle>Overview</DataTitle>\n            <Description>{info.about}</Description>\n            <DataTitle>Genres</DataTitle>\n            <Description>{info.genre}</Description>\n          </DataContainer>\n        </CardContainer>\n      )}\n      <InfoContainer>\n        <DataTitle>Additional information</DataTitle>\n        <ul>\n          <InfoLink to=\"cast\">Cast</InfoLink>\n          <InfoLink to=\"reviews\">Reviews</InfoLink>\n        </ul>\n      </InfoContainer>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\nimport {\n  normalizeMovies,\n  normalizeMoviesDetails,\n} from '../utils/normalization';\n\nconst API_KEY = 'fadee9dfff8cb6b1bff36771479589d6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  include_adult: false,\n  language: 'en-US',\n};\n\nexport const getPopularMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const getMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}?`);\n  const response = normalizeMoviesDetails(data);\n  return response;\n};\n\nexport const getMoviesBySearch = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const getMoviesCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const getMoviesReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`);\n  return data.results;\n};\n","const genre = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n\nexport default genre;\n","import genreList from './genre';\nimport noImg from '../img/noFound.png';\n\nconst genreArr = genre_id => genre_id.map(el => genreList[`${el}`]).join(', ');\nconst genreArrLib = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n  !imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\nexport const normalizeMovies = movies => {\n  return movies.map(\n    ({\n      genres = null,\n      genre_ids = null,\n      id,\n      original_title,\n      name,\n      overview,\n      popularity,\n      poster_path,\n      release_date,\n      vote_average,\n      vote_count,\n    }) => ({\n      genre: genre_ids ? genreArr(genre_ids) : genreArrLib(genres),\n      id: id,\n      title: original_title ? original_title : name,\n      about: overview,\n      popularity: popularity,\n      img: getImgPath(poster_path),\n      releaseDate: release_date ? getDate(release_date) : '',\n      vote: vote_average,\n      votes: vote_count,\n    })\n  );\n};\n\nexport const normalizeMoviesDetails = ({\n  poster_path,\n  title,\n  original_title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  return {\n    genre: genreArrLib(genres),\n    title: original_title ? original_title : title,\n    about: overview,\n    img: getImgPath(poster_path),\n    releaseDate: release_date ? getDate(release_date) : '',\n    vote: vote_average,\n  };\n};\n"],"names":["CardContainer","styled","ImageContainer","Button","Image","DataContainer","DataTitle","Description","InfoContainer","InfoLink","NavLink","movieId","useParams","useState","info","setInfo","navigate","useNavigate","location","useLocation","useEffect","getMovie","getMoviesById","res","console","log","message","alert","replace","onClick","state","from","src","img","alt","title","releaseDate","vote","about","genre","to","axios","api_key","include_adult","language","getPopularMovies","data","response","normalizeMovies","results","id","normalizeMoviesDetails","getMoviesBySearch","query","getMoviesCast","cast","getMoviesReviews","genreArrLib","genres","map","el","name","join","getImgPath","imgPath","noImg","getDate","date","slice","movies","genre_id","genre_ids","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","genreList","votes"],"sourceRoot":""}