{"version":3,"file":"static/js/643.76434fb1.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/Api.jsx","utils/genre.js","utils/normalization.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  gap: 10px 10px;\n`;\n\nexport const Item = styled(Link)`\n  align-items: center;\n  flex-wrap: wrap;\n  width: 100%;\n  flex-basis: calc(100% / 5 - 15px);\n  padding: 5px;\n  color: white;\n  background-color: rgb(10, 90, 90);\n  font-size: 18px;\n  border-radius: 2px;\n\n  & img {\n    width: 100%;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { List, Item } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies &&\n        movies.map(({ id, title, img }) => (\n          <Item key={id} to={`/movies/${id}`} state={{ from: location }}>\n            <img src={img} alt={title} />\n            <h3>{title}</h3>\n          </Item>\n        ))}\n    </List>\n  );\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  margin-bottom: 10px;\n  margin-top: 10px;\n  font-size: 36px;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { getPopularMovies } from 'services/Api';\nimport { Title } from './Home.styled';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const getpopularMovies = async () => {\n      try {\n        const movies = await getPopularMovies();\n        setMovies(movies);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getpopularMovies();\n  }, []);\n\n  return (\n    <main>\n      <Title>Trending Today</Title>\n      <MoviesList movies={movies} />\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport {\n  normalizeMovies,\n  normalizeMoviesDetails,\n} from '../utils/normalization';\n\nconst API_KEY = 'fadee9dfff8cb6b1bff36771479589d6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  include_adult: false,\n  language: 'en-US',\n};\n\nexport const getPopularMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const getMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}?`);\n  const response = normalizeMoviesDetails(data);\n  return response;\n};\n\nexport const getMoviesBySearch = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const getMoviesCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const getMoviesReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`);\n  return data.results;\n};\n","const genre = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n\nexport default genre;\n","import genreList from './genre';\nimport noImg from '../img/noFound.png';\n\nconst genreArr = genre_id => genre_id.map(el => genreList[`${el}`]).join(', ');\nconst genreArrLib = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n  !imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\nexport const normalizeMovies = movies => {\n  return movies.map(\n    ({\n      genres = null,\n      genre_ids = null,\n      id,\n      original_title,\n      name,\n      overview,\n      popularity,\n      poster_path,\n      release_date,\n      vote_average,\n      vote_count,\n    }) => ({\n      genre: genre_ids ? genreArr(genre_ids) : genreArrLib(genres),\n      id: id,\n      title: original_title ? original_title : name,\n      about: overview,\n      popularity: popularity,\n      img: getImgPath(poster_path),\n      releaseDate: release_date ? getDate(release_date) : '',\n      vote: vote_average,\n      votes: vote_count,\n    })\n  );\n};\n\nexport const normalizeMoviesDetails = ({\n  poster_path,\n  title,\n  original_title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  return {\n    genre: genreArrLib(genres),\n    title: original_title ? original_title : title,\n    about: overview,\n    img: getImgPath(poster_path),\n    releaseDate: release_date ? getDate(release_date) : '',\n    vote: vote_average,\n  };\n};\n"],"names":["List","styled","Item","Link","movies","location","useLocation","map","id","title","img","to","state","from","src","alt","Title","useState","setMovies","useEffect","getpopularMovies","getPopularMovies","console","log","MoviesList","axios","api_key","include_adult","language","data","response","normalizeMovies","results","getMoviesById","normalizeMoviesDetails","getMoviesBySearch","query","getMoviesCast","cast","getMoviesReviews","genreArrLib","genres","el","name","join","getImgPath","imgPath","noImg","getDate","date","slice","genre_id","genre_ids","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","genre","genreList","about","releaseDate","vote","votes"],"sourceRoot":""}