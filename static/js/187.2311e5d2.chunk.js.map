{"version":3,"file":"static/js/187.2311e5d2.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/Api.jsx","utils/genre.js","utils/normalization.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 25px;\n`;\n\nexport const List = styled.ul`\n  font-size: 16px;\n`;\n\nexport const Item = styled.li`\n  &:not(:last-of-type) {\n    margin-bottom: 30px;\n  }\n`;\n\nexport const Data = styled.p`\n  font-size: 16px;\n  &:not(:last-of-type) {\n    margin-bottom: 10px;\n  }\n  &:first-of-type {\n    font-weight: bold;\n    border-bottom: 1px solid black;\n  }\n  &:nth-of-type(2) {\n    font-size: 16px;\n  }\n`;\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router';\nimport { getMoviesReviews } from 'services/Api';\nimport { Container, Data, Item, List } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const res = await getMoviesReviews(Number(movieId));\n        setReviews(res);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <Container>\n      {reviews.length !== 0 ? (\n        <List>\n          {reviews &&\n            reviews.map(({ content, author_details, id }) => {\n              return (\n                <Item key={id} data_id={id}>\n                  <Data>\n                    Author:{' '}\n                    {author_details.name ? author_details.name : 'No Author'}\n                  </Data>\n                  <Data>Rating: {author_details.rating}</Data>\n                  <Data>{content}</Data>\n                </Item>\n              );\n            })}\n        </List>\n      ) : (\n        <Data>We don't nave information about reviews in that movie.</Data>\n      )}\n    </Container>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport {\n  normalizeMovies,\n  normalizeMoviesDetails,\n} from '../utils/normalization';\n\nconst API_KEY = 'fadee9dfff8cb6b1bff36771479589d6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  include_adult: false,\n  language: 'en-US',\n};\n\nexport const getPopularMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const getMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}?`);\n  const response = normalizeMoviesDetails(data);\n  return response;\n};\n\nexport const getMoviesBySearch = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const getMoviesCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const getMoviesReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`);\n  return data.results;\n};\n","const genre = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n\nexport default genre;\n","import genreList from './genre';\nimport noImg from '../img/noFound.png';\n\nconst genreArr = genre_id => genre_id.map(el => genreList[`${el}`]).join(', ');\nconst genreArrLib = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n  !imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\nexport const normalizeMovies = movies => {\n  return movies.map(\n    ({\n      genres = null,\n      genre_ids = null,\n      id,\n      original_title,\n      name,\n      overview,\n      popularity,\n      poster_path,\n      release_date,\n      vote_average,\n      vote_count,\n    }) => ({\n      genre: genre_ids ? genreArr(genre_ids) : genreArrLib(genres),\n      id: id,\n      title: original_title ? original_title : name,\n      about: overview,\n      popularity: popularity,\n      img: getImgPath(poster_path),\n      releaseDate: release_date ? getDate(release_date) : '',\n      vote: vote_average,\n      votes: vote_count,\n    })\n  );\n};\n\nexport const normalizeMoviesDetails = ({\n  poster_path,\n  title,\n  original_title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  return {\n    genre: genreArrLib(genres),\n    title: original_title ? original_title : title,\n    about: overview,\n    img: getImgPath(poster_path),\n    releaseDate: release_date ? getDate(release_date) : '',\n    vote: vote_average,\n  };\n};\n"],"names":["Container","styled","List","Item","Data","useState","reviews","setReviews","movieId","useParams","useEffect","getReviews","getMoviesReviews","Number","res","console","log","message","length","map","content","author_details","id","data_id","name","rating","axios","api_key","include_adult","language","getPopularMovies","data","response","normalizeMovies","results","getMoviesById","normalizeMoviesDetails","getMoviesBySearch","query","getMoviesCast","cast","genreArrLib","genres","el","join","getImgPath","imgPath","noImg","getDate","date","slice","movies","genre_id","genre_ids","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","genre","genreList","title","about","img","releaseDate","vote","votes"],"sourceRoot":""}